{"version":3,"sources":["Component/Register.jsx","Components/Login.jsx","Components/About.jsx","App.js","serviceWorker.js","index.js"],"names":["Register","props","useState","name","password","email","data","setData","InputEvent","event","console","log","target","value","preValue","submit","e","a","preventDefault","axios","post","then","catch","err","error","onSubmit","method","type","placeholder","onChange","required","onDoubleClick","Login","FormEvent","alert","About","useEffect","Axios","get","App","femail","setEmail","id","setValue","finish","params","dat","swal","title","text","icon","buttons","dangerMode","willDelete","show","res","done","className","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.5c4e8071.chunk.js","sourcesContent":["\r\nimport axios from 'axios';\r\nimport React, { useState } from 'react';\r\n\r\nfunction Register(props) {\r\n\r\n    const run= ()=>{\r\n        setData({\r\n          name:\"\",\r\n        password:\"\",\r\n        email:\"\"\r\n        })\r\n      }\r\n      const [data,setData]=useState({\r\n        name:\"\",\r\n        password:\"\",\r\n        email:\"\"\r\n      })\r\n      \r\n      const InputEvent =(event) =>{\r\n      \r\n        console.log(\"done\")\r\n        const {name,value}=event.target;\r\n          \r\n          setData((preValue) =>{\r\n    \r\n          \r\n         \r\n         return {\r\n             ...preValue,\r\n             [name]:value,\r\n         }\r\n        });\r\n      }\r\n      const submit=async (e)=>{\r\n    \r\n        e.preventDefault();\r\n        console.log(\"linked\");\r\n        console.log(data);\r\n        await axios.post('http://192.168.43.251:4000/send',data).then((data)=>{\r\n          console.log(data,\"nhi mila koi response\");\r\n        }).catch((err)=>{console.error(err)});\r\n        /*fetch('http://localhost:4000/send', {\r\n          method: 'post',\r\n          body:data\r\n        }).then((data)=>{\r\n          console.log(data,\"nhi mila koi response\");\r\n        }).catch((err)=>{console.error(err)});*/\r\n      }\r\n    \r\n    \r\n    return (\r\n        <>\r\n        <h1>Registration</h1>\r\n        <form onSubmit={submit} method=\"post\">\r\n        <input type=\"text\" placeholder=\"enter name\" value={data.name} onChange={InputEvent} name=\"name\" required></input><br></br><br></br>\r\n        <input type=\"password\" placeholder=\"enter password\" value={data.password} onChange={InputEvent} name=\"password\" required></input><br></br><br></br>\r\n        <input type=\"email\" placeholder=\"enter email\" value={data.email}  onChange={InputEvent} name=\"email\" required></input><br></br><br></br>\r\n        <button type=\"submit\" onDoubleClick={run}>add emp</button>\r\n        </form>\r\n            \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport { useState } from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst Login = ()=>{\r\n    const [data,setData]=useState({\r\n        email:'',\r\n        password:''\r\n\r\n    })\r\n    const InputEvent=(event)=>{\r\n        const {name,value}=event.target;\r\n          \r\n        setData((preValue) =>{\r\n  \r\n        \r\n       \r\n       return {\r\n           ...preValue,\r\n           [name]:value,\r\n       }\r\n      });\r\n\r\n    }\r\n    const FormEvent=async (e)=>{\r\n    \r\n        e.preventDefault();\r\n        console.log(\"linked\");\r\n        console.log(data);\r\n        await axios.post('http://192.168.43.251:4000/signin',data).then((data)=>{\r\n          //console.log(data.data);\r\n          alert(data.data)\r\n        }).catch((err)=>{console.error(err)});\r\n        /*fetch('http://localhost:4000/send', {\r\n          method: 'post',\r\n          body:data\r\n        }).then((data)=>{\r\n          console.log(data,\"nhi mila koi response\");\r\n        }).catch((err)=>{console.error(err)});*/\r\n      }\r\n    \r\n    return (<>\r\n    {data.name} {data.email}\r\n    <form onSubmit={FormEvent} >\r\n    <input type=\"text\" name=\"email\" placeholder=\"enter your email\" onChange={InputEvent}></input><br>\r\n    </br>\r\n    <input type=\"password\" name =\"password\" placeholder=\"enter your password\" onChange={InputEvent}></input><br></br>\r\n    <button type=\"submit\">login</button>\r\n    </form>\r\n    </>)\r\n\r\n}\r\nexport default Login;","import Axios from 'axios';\r\n\r\nimport React, { useEffect } from 'react';\r\n\r\n\r\nconst About = ()=>{\r\n    useEffect(()=>{\r\n        Axios.get('http://localhost:4000/getusers').then((data)=>{console.log(data)}).catch(err=>console.log(err))\r\n    })\r\nreturn (<div><h1>i am about</h1></div>)\r\n}\r\nexport default About;","import React, { useState } from 'react';\nimport swal from 'sweetalert';\n\n\n//import logo from './logo.svg';\nimport './App.css';\nimport Register from './Component/Register'\nimport Login from './Components/Login'\n//import Axios from 'axios';\n//import e from 'express';\nimport axios from 'axios';\nimport About from './Components/About';\n//import { extname } from 'path';\n\nfunction App() {\n  /*const [val,setVal]=useState({\n    name:'',\n    email:''\n  })*/\n  //var\n   const [email,setEmail]=useState({\n     femail:''\n   })\n  const [value,setValue]=useState({\n    name:'',\n    id:'',\n    password:''\n\n  })\n  //var\n  const emailHandler=(event)=>{\n    console.log(event.target.value)\n    \n    setEmail({\n      femail:event.target.value\n    })\n  }\n  const finish=async (e)=>{\n    \n    e.preventDefault();\n    console.log(\"finish wala\");\n   // console.log(data);\n    await axios.get('http://192.168.43.251:4000/delete',{params:{name:value.name}}).then((dat)=>{\n      //console.log(dat);\n      //alert(\"deletion sucessful\")\n      swal({\n        title: \"Are you sure?\",\n        text: \"Once deleted, you will not be able to recover your details!\",\n        icon: \"warning\",\n        buttons: true,\n        dangerMode: true,\n      })\n      .then((willDelete) => {\n        if (willDelete) {\n          swal(\"Poof! Your details has been deleted!\", {\n            icon: \"success\",\n          });\n        } else {\n          swal(\"Your details is safe!\");\n        }\n      });\n    }).catch((err)=>{console.error(err)});\n    /*fetch('http://localhost:4000/send', {\n      method: 'post',\n      body:data\n    }).then((data)=>{\n      console.log(data,\"nhi mila koi response\");\n    }).catch((err)=>{console.error(err)});*/\n  }\n\n /*const run= ()=>{\n    setData({\n      name:\"\",\n    password:\"\",\n    email:\"\"\n    })\n  }\n  \n  const [data,setData]=useState({\n    name:\"\",\n    password:\"\",\n    email:\"\"\n  })\n  \n  const InputEvent =(event) =>{\n  \n    console.log(\"done\")\n    const {name,value}=event.target;\n      \n      setData((preValue) =>{\n\n      \n     \n     return {\n         ...preValue,\n         [name]:value,\n     }\n    });\n  }\n  const submit=async (e)=>{\n\n    e.preventDefault();\n    console.log(\"linked\");\n    console.log(data);\n    await axios.post('http://localhost:4000/send',data).then((data)=>{\n      console.log(data,\"nhi mila koi response\");\n    }).catch((err)=>{console.error(err)});\n    /*fetch('http://localhost:4000/send', {\n      method: 'post',\n      body:data\n    }).then((data)=>{\n      console.log(data,\"nhi mila koi response\");\n    }).catch((err)=>{console.error(err)});*/\n  //}\n  const InputEvent=(event)=>{\n    //console.log(event.target.value)\n    setValue({\n      name:event.target.value\n    })\n  }\n\n  const show =async (e)=>{\n    e.preventDefault();\n   var  done= await axios.get('http://192.168.43.251:4000/show',{params:{\n     name:value.name\n   }}).then((res)=>{\n      \n    return res.data;\n   \n    \n      \n      }).catch((err)=>{console.error(err)})\n      console.log(done[0].name)\n      setValue({\n       name:done[0].name,\n        email:done[0].email,\n        id:done[0].id,\n        password:done[0].password,\n      // name:\"shreya\",\n      // email:\"king\",\n      })\n     // console.log(...done)\n     //done.map((val,i)=>{\n       // console.log(`${done[i].id} and ${done[i].name}and${done[i].email}`)\n      //})\n\n  } \n  \n const emailSubmit=(e)=>{\ne.preventDefault();\naxios.get('http://192.168.43.251:4000/forget',{params:{email:email.femail}}).then((res)=>{\n  console.log(res)\n  alert(res.data)\n}).catch((err)=>{\n  console.error(err)\n})\n\n }\n /* const submit=()=>{\n    \n    console.log(\"linked\");\n    \n    fetch(`http://localhost:4000/send`).then((res)=>{\n      console.log(res.json())\n      console.log(\"linked\")\n    })\n  }*/\n  return (<>\n    <div className=\"App\">\n      <div><About/></div>\n     <Register/>\n     \n     <form onSubmit={show}>\n       <input text=\"text\" name=\"search\" placeholder=\"enter name to get details \" onChange={InputEvent} required></input>\n     <button >show details</button>\n     </form>\n   <h1>{value.id}</h1>\n  <h1>{value.email}</h1>\n  <h1>{value.password}</h1>\n  <button onClick={finish} >delete my details</button><br></br>\n  <h1>{email.femail}</h1>\n  <Login/>\n  <form onSubmit={emailSubmit}>\n  <input type=\"email\" placeholder=\"enter your email\" name=\"femail\" value={email.femail} onChange={emailHandler} ></input>\n  <button type=\"submit\">forget password</button></form>\n    </div>\n    </>\n  );\n\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}